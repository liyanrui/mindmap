\writestatus{loading}{ConTeXt User Module / mindmap}
\startmodule[mindmap]
\startMPinclusions
lua("
  mindenv = {
    tracker = {'(0, 0)'}, knotcolor = 'darkred', colors = {},
    level = 1, stretch = 1.75, thickness = '4pt', offset = '.125BodyFontSize',
    handle = '(0, 0)', min = '4cm', thought = '1cm', factor = 1.3
  }
  for i = 1, 100 do mindenv.colors[i] = '.7white'; end"
);

def mindenv_get(expr a) = lua("mp.print(mindenv." & a & ")") enddef;
def mindenv_set(expr a, v) = lua("mindenv." & a & " = " & tolua(v)); enddef;
vardef tolua(expr v) =
  if numeric v: decimal(v) fi
  if pair v: "'" & topair(v) & "'" fi
  if color v: tocolor(v) fi
enddef;
vardef tocolor(expr a) =
  save s; string s;
  s := "'(" & decimal (redpart a) & ","
            & decimal (greenpart a) & ","
            & decimal (bluepart a) & ")'";
  s
enddef;
\stopMPinclusions
  
\startMPinclusions[+]
vardef get_normal_offset(expr p, t, dist)(suffix sign) = 
  save e, f, rot, offset, dx, dy, normal; 
  pair e, f, normal; numeric k, rot, dx; pair offset;
  e := point (t - .05) along p;
  f := point (t + .05) along p;
  dx := xpart f - xpart e;
  dy := ypart f - ypart e;
  if dx = 0:
    if dy >= 0: rot := 90; else: rot := -90; fi;
  else:
    rot := 180 * atan(dy / dx) / pi;
  fi;
  normal := dir(rot + 90);
  if (normal dotprod up) < 0: normal := -normal;  fi;
  offset := dist * normal;
  if dx < 0: sign := -1; fi;
  offset
enddef;

vardef regular_curve(expr a, b) =
  save p, w, h, e, f; path p; numeric w, h; pair e, f;
  w := abs(xpart b - xpart a); h := abs(ypart b - ypart a);
  if w > h:
    if xpart b - xpart a >= 0:
      e := a + (.5w, 0); f := b - (.5w, 0);
    else:
      e := a - (.5w, 0); f := b + (.5w, 0);
    fi;
  else:
    if ypart b - ypart a >= 0:
      e := a + (0, .5h); f := b - (0, .5h);
    else:
      e := a - (0, .5h); f := b + (0, .5h);
    fi;
  fi;
  p := a .. controls e and f .. b;
  p
enddef;

vardef get_thought_offset(expr p, dist) =
  save offset; pair offset;
  offset := get_normal_offset(p, .5, dist);
  offset
enddef;

vardef polarcoord(expr a, r, angle) =
  save b; pair b; b :=  ((r, 0) rotated angle) shifted a;
  b
enddef;

vardef mind@# text anything =
  save s; string s; s := str @#;
  if s = "": do_mind anything (0); fi;
  if s = "enter": do_mind anything (1); fi;
  if s = "exit": mind_backward ; fi;
  if s = "newroot": do_mind_new anything; fi;
  if s = "handle": do_mind_handle anything; fi;
  if s = "howfar":
    mindenv_set("howfar") anything;
  fi;
  if s = "colors": mindpath_setcolors anything; fi;
  if s = "knotcolor": mindenv_set("knotcolor") anything; fi;
  if s = "thickness":
    mindenv_set("thickness") anything;
  fi;
enddef;

def do_mind(expr name, angle, action) =
  begingroup;
    save b, p, q, u;
    save i, tracker, handle, howfar, thought, thi, off, f, pos, sign, min;
    pair b, tracker, handle, pos;
    path p, q;
    numeric i, howfar, thought, thi, off, f, sign;
    % get environment variables
    i := mindenv_get("level");
    tracker := mindenv_get("tracker[" & decimal i & "]");
    thought := mindenv_get("thought");
    thi := mindenv_get("thickness");
    f := mindenv_get("factor");
    for j = 2 upto i: thi := thi / f; endfor;
    off := mindenv_get("offset"); 
    % working
    howfar := mindenv_get("stretch") * (bbwidth textext(name));
    min := mindenv_get("min");
    if howfar < min: howfar := min; fi;
    b := polarcoord(tracker, howfar, angle);
    p := regular_curve(tracker, b);
    draw p withpen pencircle scaled thi
           withcolor mindenv_get("colors[" & decimal i & "]");
    draw tracker withpen pencircle scaled (thi + 1pt)
                 withcolor mindenv_get("knotcolor");
    handle := point thought on p;
    q := p cutbefore handle; mindenv_set("handle", handle);
    sign := 1; pos := get_normal_offset(q, .5, thi + off, sign);
    draw lmt_followtext [
      text = name,
      spread = false,
      reverse = if sign > 0: false else true fi,
      path = q ] shifted pos;
    if action > 0: mind_forward(b); fi;
  endgroup;
enddef;

def do_mind_new(suffix newbase) (expr a) =
  pair newbase; newbase := a;
  mindenv_set("tracker[1]", a);
  mindenv_set("level", 1);
enddef;

vardef do_mind_handle(suffix current_handle) =
  current_handle = mindenv_get("handle");
enddef;

def mind_forward(expr a) =
  begingroup;
    save i, t, f; numeric i, t, f;
    i := mindenv_get("level") + 1;
    mindenv_set("level", i);
    mindenv_set("tracker[" & decimal i & "]", a);
  endgroup;
enddef;

def mind_backward =
  begingroup;
    save i, t, f; numeric i, t, f;
    i := mindenv_get("level") - 1;
    if i < 0:
      message "incorrect mind level!";
    fi;
    mindenv_set("level", i);
  endgroup;
enddef;

def mindpath_setcolors(text colors) =
  begingroup;
    save i; numeric i; i = 1;
    for it = colors:
      mindenv_set("colors[" & decimal i & "]", it);
      i := i + 1;
    endfor;
  endgroup;
enddef;
\stopMPinclusions
\stopmodule
\endinput
