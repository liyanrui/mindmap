\writestatus{loading}{ConTeXt User Module / mindmap}
\startmodule[mindmap]
\startMPinclusions
lua("
  mindenv = {
    tracker = {'(0, 0)'}, knot_color = 'darkred', colors = {},
    level = 1, howfar = '3cm', thickness = '4pt', text_offset = '.2BodyFontSize',
    handle = '(0, 0)', random = '5mm', thought = '.3', factor = 1.3
  }
  for i = 1, 100 do mindenv.colors[i] = '.7white'; end"
);

def mindenv_get(expr a) = lua("mp.print(mindenv." & a & ")") enddef;
def mindenv_set(expr a, v) = lua("mindenv." & a & " = " & tolua(v)); enddef;
vardef tolua(expr v) =
  if numeric v: decimal(v) fi
  if pair v: "'" & topair(v) & "'" fi
  if color v: tocolor(v) fi
enddef;
vardef tocolor(expr a) =
  save s; string s;
  s := "'(" & decimal (redpart a) & ","
            & decimal (greenpart a) & ","
            & decimal (bluepart a) & ")'";
  s
enddef;
\stopMPinclusions
  
\startMPinclusions[+]
vardef get_normal_offset(expr p, t, dist) = 
  save e, f, k, rot, offset, dx; 
  pair e, f; numeric k, rot, dx; pair offset;
  e := point (t - .05) along p;
  f := point (t + .05) along p;
  dx := xpart f - xpart e;
  if dx = 0:
    k := -1;
  else:
    k := (ypart f - ypart e) / (xpart f - xpart e);
  fi;
  rot := 180 * atan(k) / pi;
  offset := dist * dir(rot + 90);   % 关键改动之处
  offset
enddef;

vardef regular_curve(expr a, b) =
  save p, w, h, s, e, f; path p; numeric w, h, s; pair e, f;
  w := abs(xpart b - xpart a); h := abs(ypart b - ypart a);
  s := .3;
  if w > h:
    if xpart b - xpart a >= 0:
      e := a + (.5w, 0); f := b - (.5w, 0);
    else:
      e := a - (.5w, 0); f := b + (.5w, 0);
    fi;
  else:
    if ypart b - ypart a >= 0:
      e := a + (0, .5h); f := b - (0, .5h);
    else:
      e := a - (0, .5h); f := b + (0, .5h);
    fi;
  fi;
  p := a .. controls e and f .. b;
  p
enddef;

vardef get_thought_offset(expr p, dist) =
  save offset; pair offset;
  offset := get_normal_offset(p, .5, dist);
  offset
enddef;

vardef polarcoord(expr a, r, angle) =
  save b; pair b; b :=  ((r, 0) rotated angle) shifted a;
  b
enddef;

vardef mind@# text anything =
  save s; string s; s := str @#;
  if s = "": do_mind anything (0); fi;
  if s = "enter": do_mind anything (1); fi;
  if s = "exit": mind_backward ; fi;
  if s = "newroot": do_mind_new anything; fi;
  if s = "handle": do_mind_handle anything; fi;
  if s = "howfar":
    mindenv_set("howfar") anything;
  fi;
  if s = "colors": mindpath_setcolors anything; fi;
  if s = "knotcolor": mindenv_set("knot_color") anything; fi;
  if s = "thickness":
    mindenv_set("thickness") anything;
  fi;
enddef;

def do_mind(expr name, angle, action) =
  begingroup;
    save b, p, q, u, i, tracker, r, here, thickness;
    pair b, tracker; path p, q; numeric i, howfar, r, here, thickness; 
    i := mindenv_get("level");
    tracker := mindenv_get("tracker[" & decimal i & "]");
    here := mindenv_get("thought");
    thickness := mindenv_get("thickness");
    r := mindenv_get("howfar") randomized mindenv_get("random");
    b := polarcoord(tracker, r, angle);
    p := regular_curve(tracker, b);
    pickup pencircle scaled thickness;
    draw p withcolor mindenv_get("colors[" & decimal i & "]");
    draw tracker withcolor mindenv_get("knot_color");
    q := p cutbefore (point here along p);
    draw lmt_followtext [
      text = name,
      spread = false,
      reverse = if xpart b < xpart tracker: true else: false fi,
      path = q
    ] shifted get_thought_offset(q, mindenv_get("text_offset") + thickness);
    mindenv_set("handle", point here along p);
    if action > 0: mind_forward(b); fi;
  endgroup;
enddef;

def do_mind_new(suffix newbase) (expr a) =
  pair newbase; newbase := a;
  mindenv_set("tracker[1]", a);
  mindenv_set("level", 1);
enddef;

vardef do_mind_handle(suffix current_handle) =
  current_handle = mindenv_get("handle");
enddef;

def mind_forward(expr a) =
  begingroup;
    save i, t, f; numeric i, t, f;
    i := mindenv_get("level") + 1;
    mindenv_set("level", i);
    mindenv_set("tracker[" & decimal i & "]", a);
    t := mindenv_get("thickness");
    f := mindenv_get("factor");
    mindenv_set("thickness", t/f);
  endgroup;
enddef;

def mind_backward =
  begingroup;
    save i, t, f; numeric i, t, f;
    i := mindenv_get("level") - 1;
    if i < 0:
      message "incorrect mind level!";
    fi;
    mindenv_set("level", i);
    t := mindenv_get("thickness");
    f := mindenv_get("factor");
    mindenv_set("thickness", t*f);
  endgroup;
enddef;

def mindpath_setcolors(text colors) =
  begingroup;
    save i; numeric i; i = 1;
    for it = colors:
      mindenv_set("colors[" & decimal i & "]", it);
      i := i + 1;
    endfor;
  endgroup;
enddef;
\stopMPinclusions
\stopmodule
\endinput
